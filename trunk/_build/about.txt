Q: What is "_build" for?
-----------------------------------------------------------------------------------------------------------------------------
A: The source code of Jax Games is heavily commented and spread across many files. Whilst this help make the project easier
   to maintain and improve, it is impractical for users who wish to play the games, as it adds to the amount they have to
   download - especially on dial up.
   
   The Jax Games build process is a set of scripts that create a copy of the project, but with all the comments stripped out,
   and the files combined together and compressed. This copy is then ideal to upload to a web server for users to play on.
   
Q: How much does the build process reduce the code by?
-----------------------------------------------------------------------------------------------------------------------------
A: This varies on each game, but code is reduced by as much as 400%, as well as a reduced number of actual files to request.
   The overall project size is reduced by 40-60%.
   
Q: How do I run the build process?
-----------------------------------------------------------------------------------------------------------------------------
A: The build process only works on Mac OS X at the moment. Windows and Linux scripts will be provided when available.
   If you are a TextMate user, simply open "/_build/build_mac.command" and press Apple+R to run! Otherwise, open the file in
   a text editor and follow instructions at the top to make the file executable and run it. From there on you can just
   double-click on "build_mac.command" to run the build process.

Q: How does the build process work?
-----------------------------------------------------------------------------------------------------------------------------
A: The best way to know is to look at the source code, but here is an overview of what happens:

   1: Copy current code to a "source" folder in "/_build/release/"
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      The current code is copied to a temporary folder where it can be manipulated without damaging the actual working copy.
      When copying, the build process makes sure to exclude files that do not need to be distributed to developers and would
      waste space. For example "Thumbs.db" files generated by Windows, any subversion files, as well as the SQLite database
      in "/jax/db/" which is generated automatically when playing the games.
      
   2: Create a distributable archive of the source code
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Sending the Jax Games source code to someone who doesn't have SVN installed can be tricky. Just zipping the folder
      generates a large file because of many things that do not need to be included, and your SVN files also possibly being
      included.
      
      Once the source code is cleanly copied to the temporary folder, a ZIP file is made of it named "jax-games-src".
      If WinRAR is present on the system, a RARchive will also be made (RAR provides better compression)
      
   3: Create a distributable archive of Jax
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      The "/jax" folder in Jax Games contains the server side components, and the jax.js script that allows browser-to-
      browser AJAX. This script could be used with any project, not just Jax Games, so a ZIP file is made of this folder
      named "jax-dist". A RARchive is also generated if WinRAR is installed.
      
   4: Combine Javascript and CSS files
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      To reduce the number of files, select javascript and css files are combined. This is split into two main sections:
      
      i)  The Libraries are all the javascripts required for any game to be written for Jax Games, but not the game itself.
          "/js/_bootfiles.js" loads these files as per the configuration in "/js/_CONFIG.js"
          These are:
            + /js/_libs/scriptaculous/prototype.js     - javascript extension library - <prototypejs.org>
            + /js/_libs/scriptaculous/scriptaculous.js - animation library, boot strap file
            + /js/_libs/scriptaculous/effect.js        - the animation code
            + /js/_libs/firebug/firebugx.js            - disable firebug debug commands for people who don't have it installed
            + /jax/jax.js                              - jax component as mentioned above
            + /jax/shared.js                           - shared code for all games, and where the `onload` function is
            
          Rhino is a Java implementation of Mozilla's SpiderMonkey Javascript engine. It allows you to run javascript files
          in stand-alone fashion, without the browser. The build scripts execute Rhino using "_bootfiles.js" to list the
          files above in an array, which are then combined together into a single file, replacing "boot.js".
          See "/_build/libs/rhino_makeboot.js" for this process.
          
          Therefore, where normally "boot.js" would be loaded in Firefox, and all the other scripts called in, the combined
          "boot.js" is now a single file containing all those scripts - reducing the number of files the end user has to
          download and speeding up loading times.
          
      ii) The Games are the Javascript and CSS files that make up each game in Jax Games. Within "/games/" there is a folder
          for each game. In each game folder there are at least "game.js" and "game.css" files.
          
          If a game only requires one Javascript file for everything, then "game.js" will contain all the code for the game.
          However, in most instances "games.js" is much like "boot.js", in that its only function is to load the other
          Javascript files the game actually uses. In the exmaple of Othello, the file looks like this:
          
          include ("../-/_js/_grid.js");
          include ("_othello.js");
          
          The `include` Javascript function is defined in "boot.js", and simply loads another Javascript file.
          In the build process however, Javascript files are scanned for this include function, and where it appears the
          line is replaced with the actual contents of the file referenced - therefore combining the Javascript files for
          the game into one file.
          
          The underscore before a filename is to denote that the file is source-code-only, and will not be included in the
          release build of the project since those particular files will have been combined into "game.js" and thus no longer
          needed. Therefore, remember to always name files on the disk from the `include` function, with an underscore.
          
          CSS files are also scanned, and if an `@import "_filename.css";` command is found then the referenced file is
          injected at that point.
          
          *** WARNING: If you include a CSS file from another folder (e.g. `@import "../_filename.css";`) and that CSS file
          has image references (e.g. `background-image: url("images/filename.png");`), your image references will break
          because the CSS code will now be within a different file! Therefore, when importing CSS files, either do not
          include any image references in the imported file, or ensure that it is within the same folder as the calling file.
          
   5: Copy modified source to release directory
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      Now that source code archives have been spun off, and the combining has been done, we need to copy the modified source
      to "/_build/release/jaxgames/" in order to strip the source of all files that end users who are only playing the games
      will not need.
      
      When copying, from "/_build/release/source/", all files and folders beginning with an underscore are excluded, meaning
      that "_build" does not go into the release copy as well as all the Javascript and CSS files that have now been combined
      into "boot.js" and each "game.js/css".
      
   6: Compact scripts
      ~~~~~~~~~~~~~~~
      The combined scripts are pretty massive. The next step is to compact them by removing all the comments, and whitespace.
      This is done using the custom version of Rhino provided by Dojo Toolkit <alex.dojotoolkit.org/shrinksafe/>. Each
      Javascript file is sent to Rhino and comes out in compacted form.
      
      As Rhino is a Javascript engine that re-parses the scripts in memory, the code does not break from where people have
      forgotten (or refused) to put semicolons on the end of lines.
      
   7: Compress scripts
      ~~~~~~~~~~~~~~~~
      All Javascript files that are over 4 KB are then put through Dean Edward's Packer <dean.edwards.name/packer/>
      This heavily compresses Javascript files through a number of techniques. Generally though, files below 4 KB do not
      compress enough, or not at all to be worthwhile.
      
   8: Add headers
      ~~~~~~~~~~~
      Now that all whitespace and comments have been removed from the Javascript, and compressed into an indecipherable
      chunk of code, we need to add copyright and information notices to the top of each file.
      
      "boot.js" has "/_build/headers/boot.js" prepended to it which gives attribution for all the third party scripts that
      go into it. All other Javascript files have the general "/_build/headers/jaxgames.js" notice attached
      
   9: Package the release
      ~~~~~~~~~~~~~~~~~~~
      With everything done, we now only need to archive the release folder. A ZIP named "jax-games-dist" is spun off, and as
      usual a RARchive too if WinRAR is installed.
      
That's all folks!
